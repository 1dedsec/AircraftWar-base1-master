 @startuml
'https://plantuml.com/class-diagram

abstract class AbstractFlyingObject
{
    # locationX:int
    # locationY:int
    # speedX:int
    # speedY:int
    # image:BufferedImage
    # width:int
    # height:int
    # isValid:boolean

    + AbstractFlyingObject(int locationX, int locationY, int speedX, int speedY)
    + forward():void
    + crash(AbstractFlyingObject flyingObject):boolean
    + setLocation(double locationX, double locationY):void
    + getLocationX():int
    + getLocationY():int
    + getSpeedY():int
    + getImage():BufferedImage
    + getWidth():int
    + getHeight():int
    + notValid():boolean
    + vanish():void
}
abstract class AbstractAircraft
{
	# axHp:int
    # hp:int
    + AbstractAircraft(int locationX, int locationY, int speedX, int speedY, int hp)
    + decreaseHp(int decrease):void
    + getHp():int
    + {abstract} shoot():List<BaseBullet>
 }


abstract class BaseBullet
{
    - power:int
    + BaseBullet(int locationX, int locationY, int speedX, int speedY, int power)
    + forward():void
	+ getPower():int
}

abstract class AbstractProp
{
    + {abstract} propActive():void
    + forward():void
 }
interface AircraftFactory{
    + createEnemyAircraft():AbstractAircraft;
}
interface PropFactory{
    + createProp(int locationX,int locationY,int speedX,int speedY):AbstractProp;
}

AbstractFlyingObject <|-- AbstractAircraft
AbstractFlyingObject <|-- BaseBullet
AbstractFlyingObject <|-- AbstractProp

AbstractAircraft <|-- HeroAircraft
AbstractAircraft <|-- MobEnemy

MobEnemy <|-- EliteEnemy
MobEnemy <|-- BossEnemy

BaseBullet <|-- HeroBullet
BaseBullet <|-- EnemyBullet

AbstractProp <|-- BulletProp
AbstractProp <|-- BombProp
AbstractProp <|-- BloodProp

AircraftFactory <|-- EliteEnemyFactory
AircraftFactory <|-- MobEnemyFactory
AircraftFactory <|-- BossEnemyFactory
AbstractAircraft <-- AircraftFactory:create

PropFactory <|-- BulletPropFactory
PropFactory <|-- BombPropFactory
PropFactory <|-- BloodPropFactory
AbstractProp <-- PropFactory:create

BulletProp <-- BulletPropFactory:create
BombProp <-- BombPropFactory:create
BloodProp <-- BloodPropFactory:create


MobEnemy <-- MobEnemyFactory:create
EliteEnemy <-- EliteEnemyFactory:create
BossEnemy <-- BossEnemyFactory:create

class HeroAircraft {
    + singleton:HeroAircraft
    - shootNum:int
    - power:int
    - direction:int
    - HeroAircraft(int locationX, int locationY, int speedX, int speedY, int hp)
    + getSingleton():HeroAircraft
    + forward():void
    + shoot():List<BaseBullet>
}

class MobEnemy {
    + MobEnemy(int locationX, int locationY, int speedX, int speedY, int hp)
    + forward():void
    + shoot():List<BaseBullet>
}
class EliteEnemy {
    - shootNum:int
    - power:int
    - direction:int
    + EliteEnemy(int locationX, int locationY, int speedX, int speedY, int hp)
    + forward():void
    + shoot():List<BaseBullet>
}
class EliteEnemyFactory {
    + createEnemyAircraft():AbstractAircraft
}
class MobEnemyFactory {
    + createEnemyAircraft():AbstractAircraft
}
class BossEnemyFactory {
    + createEnemyAircraft():AbstractAircraft
}
class BossEnemy {
    - shootNum:int
    - power:int
    - direction:int
    + BossEnemy(int locationX, int locationY, int speedX, int speedY, int hp)
    + shoot():List<BaseBullet>
}

class BloodProp{
    + BloodProp(int locationX, int locationY, int speedX, int speedY)
    + PropActive():void
}

class BombProp{
    + BombProp(int locationX, int locationY, int speedX, int speedY)
    + PropActive():void
}

class BulletProp{
    + BulletProp(int locationX, int locationY, int speedX, int speedY)
    + PropActive():void
}
class BloodPropFactory{
    + createProp(int locationX, int locationY, int speedX, int speedY):AbstractProp
}
class BombPropFactory{
    + createProp(int locationX, int locationY, int speedX, int speedY):AbstractProp
}
class BulletPropFactory{
     + createProp(int locationX, int locationY, int speedX, int speedY):AbstractProp
 }

class HeroBullet {
    + HeroBullet(int locationX, int locationY,
     int speedX, int speedY, int power)
}

class EnemyBullet {
    + EnemyBullet(int locationX, int locationY,
     int speedX, int speedY, int power)
}

@enduml